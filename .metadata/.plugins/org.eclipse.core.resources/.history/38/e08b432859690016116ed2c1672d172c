package algorithms.search;

import java.util.PriorityQueue;

public abstract class CommonSearcher<T> implements Searcher<T> {

	protected PriorityQueue<State<T>> openList;
	private int evaluatedNodes;

	public CommonSearcher() {
		super();
		this.openList = new PriorityQueue<State<T>>();
		this.evaluatedNodes = 0;
	}


	@Override
	public abstract Solution<T> search(Searchable s);


	@Override
	public int getNumberOfNodesEvaluated() {
		return evaluatedNodes;
	}

	protected State<T> popOpenList()
	{
		evaluatedNodes++;
		return openList.poll();
	}

	protected void addToOpenList(State<T> s)
	{
		openList.add(s);
	}

	protected Solution<T> backTrace(State<T> goalState, State<T> startState){
		
		Solution<T> sol = new Solution<T>();

		while(! goalState.equals(startState)){
			sol.getStates().add(goalState);
			goalState = goalState.getCameFrom();
		}

		return sol;
	}
}