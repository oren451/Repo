package algorithms.search;

import java.util.List;

import algorithms.mazeGenerators.Maze3d;
import algorithms.mazeGenerators.Position;

public class DomainSearchable implements Searchable<State<T>, Position> {

	//Like Maze3d, Maze2d, Scrable String
	//private CommonSearchDomain mCommonSearchDomain;
	private Maze3d maze;
	
	public DomainSearchable(Maze3d maze) {
		super();
		this.maze = maze;
	}
	
	@Override
	public State<Position> getStartState() {
		Position p = maze.getStartPosition();
		return new State<Position>(p.toString(), p);
	}

	@Override
	public State<Position> getGoalState() {
		Position p = maze.getEndPosition();
		return new State<Position>(p.toString(), p);
	}

	@Override
	public List<State<Position>> getAllPossibleStates(State<Position> s) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double getMoveCost(State<Position> currState, State<Position> neighbor) {
		
		return 0;
	}
	

//	
//
//	@Override
//	public PositionState getStartState() {
//		return new PositionState(maze.getStartPosition());
//	}
//
//	@Override
//	public PositionState getGoalState() {
//		return new PositionState(maze.getEndPosition());
//	}
//
//	@Override
//	public <T> List<State<T>> getAllPossibleStates(State<T> s) {
//		
//		List<State<Position>> positionStateList = new ArrayList<>();
//		
//		Position p = (PositionState)(s.getValue());
//		try {
//			 ArrayList<Position> possibleMovesAsPositionsArray = maze.getPossibleMovesAsPositionsArray(p);
//			 for( Position move : possibleMovesAsPositionsArray)
//			 {
//				 positionStateList.add(new PositionState(move));
//			 }
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		
//		return positionStateList;
//	}
//
//	@Override
//	public <T> double getMoveCost(State<T> currState, State<T> neighbor) {
//		
//		return neighbor.getCost() + currState.getCost();
//	}
//
//	@Override
//	public List<State<PositionState>> getAllPossibleStates(State<PositionState> s) {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public double getMoveCost(State<PositionState> currState, State<PositionState> neighbor) {
//		// TODO Auto-generated method stub
//		return 0;
//	}
//
//	@Override
//	public List<State<PositionState>> getAllPossibleStates(State<PositionState> s) {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public double getMoveCost(State<PositionState> currState, State<PositionState> neighbor) {
//		// TODO Auto-generated method stub
//		return 0;
//	}
}