/*
 * Store.cpp
 *
 *  Created on: Apr 21, 2016
 *      Author: orenk
 */
#pragma once

using namespace std;

Store::~Store() {
}

Store::Store(const string& storeName, int factor, int productsAmount, const Product* allProductArray):
	mStoreName(storeName),
	mFactor(factor),
	mProductsAmount(productsAmount),
	mAllProductArray()
{
	for(int i = 0;i < mProductsAmount; ++i)
	{
		addProductToStore(mAllProductArray[i]);
	}
}

void Store::addProductToStore(const Product &product) {

	int currentLength;
	if(typeid(product) == typeid(FruitProduct))
	{
		mAllProductArray[currentLength] = new FruitProduct(static_cast<FruitProduct>(product));
	}
	else if(typeid(*product) == typeid(VegtableProduct))
	{
		mAllProductArray[currentLength] = dynamic_cast<VegtableProduct>(product);
	}
	else if(typeid(*product) == typeid(NonMilkyProduct))
	{
		mAllProductArray[currentLength] = dynamic_cast<NonMilkyProduct>(product);
	}
	else if(typeid(*product) == typeid(MilkyCheeseProduct))
	{
		mAllProductArray[currentLength] = dynamic_cast<MilkyCheeseProduct>(product);
	}
	else
	{
		throw "Wrong type";
	}

	mProductsAmount++;
}

int Store::calculateStoreValue() {

	int summery = 0;
	for(int i = 0;i < mProductsAmount; ++i)
	{
		if(typeid(mAllProductArray[i]) == typeid(FruitProduct))
		{
			summery += (FruitProduct)mAllProductArray[i]->calculatePrice();
		}
		else if(typeid(mAllProductArray[i]) == typeid(VegtableProduct))
		{
			summery += (VegtableProduct)mAllProductArray[i]->calculatePrice();
		}
		else if(typeid(mAllProductArray[i]) == typeid(NonMilkyProduct))
		{
			summery += (NonMilkyProduct)mAllProductArray[i]->calculatePrice();
		}
		else if(typeid(mAllProductArray[i]) == typeid(MilkyCheeseProduct))
		{
			summery += (MilkyCheeseProduct)mAllProductArray[i]->calculatePrice();
		}
		else
		{
			summery += (MilkProduct)mAllProductArray[i]->calculatePrice();
		}
	}

	return summery;
}

void Store::printStoreDetails() {

	cout << "Store Details Are:" << endl;
	//cout <<
}

