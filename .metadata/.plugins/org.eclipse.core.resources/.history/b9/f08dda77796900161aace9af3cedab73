package algorithms.search;

import java.util.ArrayList;
import java.util.List;

import algorithms.mazeGenerators.Maze3d;
import algorithms.mazeGenerators.Position;

public class DomainSearchable<T> implements Searchable<Position> {

	//Like Maze3d, Maze2d, Scrable String
	//private CommonSearchDomain mCommonSearchDomain; and then call the class DomainSearchable
	private Maze3d maze;

	public DomainSearchable(Maze3d maze) {
		super();
		this.maze = maze;
	}

	@Override
	public State<Position> getStartState() {
		Position p = maze.getStartPosition();
		return new State<Position>(p.toString(), p);
	}

	@Override
	public State<Position> getGoalState() {
		Position p = maze.getEndPosition();
		return new State<Position>(p.toString(), p);
	}

	@Override
	public List<State<Position>> getAllPossibleStates(State<Position> s) {

		List<State<Position>> movesList = new ArrayList<>();

		try {
			ArrayList<Position> possibleMovesAsPositionsArray = 
					maze.getPossibleMovesAsPositionsArray((Position)s.getValue());
			for(Position move : possibleMovesAsPositionsArray)
			{
				movesList.add(new State<Position>(move.toString(), move));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return movesList;
	}

	@Override
	public double getMoveCost(State<Position> currState, State<Position> neighbor) {
		return neighbor.getCost() + currState.getCost();
	}
}